package main

import (
	"context"
	"database/sql"
	"errors"
	"log"
	"myproject/config"
	internalconfig "myproject/internal/config"
	internaldb "myproject/internal/db"
	"myproject/internal/handlers"
	"net/http"
	"os"
	"os/signal"
	"syscall"
	"time"
)

func main() {
	err := internalconfig.LoadEnv(".env")
	if err != nil {
		panic(err)
	}

	connectConfig := config.Load()

	db, err := internaldb.NewDB(
		connectConfig.DBHost,
		connectConfig.DBPort,
		connectConfig.DBUser,
		connectConfig.DBPass,
		connectConfig.DBName,
	)

	if err != nil {
		panic(err)
	}

	defer func(Conn *sql.DB) {
		err = Conn.Close()
		if err != nil {
			panic(err)
		}
	}(db.Conn)

	srv := handlers.InitRoutes(db.Conn)

	// –ö–∞–Ω–∞–ª –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
	quit := make(chan os.Signal, 1)
	signal.Notify(quit, syscall.SIGINT, syscall.SIGTERM)

	go func() {
		log.Println("Starting server on :8080")
		config.InitConfig()
		config.InitGlobalConfig()

		err := srv.ListenAndServe()
		if err != nil && !errors.Is(err, http.ErrServerClosed) {
			log.Printf("‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: %v", err)
			os.Exit(1)
		}

	}()

	// –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
	<-quit
	log.Println("üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è, –∑–∞–∫—Ä—ã–≤–∞–µ–º —Å–µ—Ä–≤–µ—Ä...")

	// –û—Ç–º–µ–Ω–∞ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç
	config.CancelGlobalCtx()

	// –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å —Ç–∞–π–º-–∞—É—Ç–æ–º –¥–ª—è graceful shutdown
	ctx, cancel := context.WithTimeout(context.Background(), 5*time.Second)
	defer cancel()

	// –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–∞
	if err := srv.Shutdown(ctx); err != nil {
		log.Printf("‚ùó –û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–∞: %v", err)
		os.Exit(1)
	}
	log.Println("‚úÖ –°–µ—Ä–≤–µ—Ä –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
}
